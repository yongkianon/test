
We are setup up Linux Cluster with 2 nodes with the following resources:
  1. IP88  - floating IP 192.168.1.88
  2. HTTPD - Apache HTTP Web Server
  3. IP88 need to start first before HTTPD
  4. HTTPD must be binding to IP88
  5. use HTTP server-status for HTTPD resource monitoring

[ALL]  - command that need to execute on both nodes
[N1]   - in the first node, node1 in this case
[NODE] - either one of cluster active nodes which is in ONLINE mode

**Note:
pcs command and property setting are in /var/lib/pacemaker/cib/cib.xml
DO NOT edit this file manually, you MUST need to manage cluster using pcs command




Before you can setup Linux Cluster, make sure the following

[ALL] 1. yum install pacemaker pcs resource-agents cman ccs

[ALL] 2. NetworkManager will need to be off permanent if system running in runlevel 5
chkconfig NetworkManager off

[ALL] 3. create hostname in ALL cluster nodes.
vi /etc/hosts
192.168.1.81  node1.alltrix.biz  node1
192.168.1.82  node2.alltrix.biz  node2

[ALL] 4. OS firewall new rules for CMAN, DLM, RICCI, LUCI. can refer to
https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Cluster_Administration/s2-iptables_firewall-CA.html

iptables -I INPUT -m state --state NEW -m multiport -p udp -s 192.168.1.0/24 -d 192.168.1.0/24 --dports 5404,5405 -j ACCEPT
iptables -I INPUT -m addrtype --dst-type MULTICAST -m state --state NEW -m multiport -p udp -s 192.168.1.0/24 --dports 5404,5405 -j ACCEPT
iptables -I INPUT -m state --state NEW -p tcp -s 192.168.1.0/24 -d 192.168.1.0/24 --dport 21064 -j ACCEPT
iptables -I INPUT -m state --state NEW -p tcp -s 192.168.1.0/24 -d 192.168.1.0/24 --dport 11111 -j ACCEPT
iptables -I INPUT -m state --state NEW -p tcp -s 192.168.1.0/24 -d 192.168.1.0/24 --dport 16851 -j ACCEPT
iptables -I INPUT -m state --state NEW -p tcp -s 192.168.1.0/24 -d 192.168.1.0/24 --dport  8084 -j ACCEPT
iptables -I INPUT -p igmp -j ACCEPT
service iptables save ; service iptables restart

[N1] 5. Now, clustering setup ready to go.
Note that cluster name cannot exceed 15 characters (we will use 'pacemaker1')

ccs -f /etc/cluster/cluster.conf --createcluster pacemaker1
ccs -f /etc/cluster/cluster.conf --addnode node1
ccs -f /etc/cluster/cluster.conf --addnode node2
ccs -f /etc/cluster/cluster.conf --addfencedev pcmk agent=fence_pcmk
ccs -f /etc/cluster/cluster.conf --addmethod pcmk-redirect node1
ccs -f /etc/cluster/cluster.conf --addmethod pcmk-redirect node2
ccs -f /etc/cluster/cluster.conf --addfenceinst pcmk node1 pcmk-redirect port=node1
ccs -f /etc/cluster/cluster.conf --addfenceinst pcmk node2 pcmk-redirect port=node2

[N1] 6. At node1, copy cluster.conf to node2
scp -rp /etc/cluster/cluster.conf root@node2:/etc/cluster/cluster.conf

[ALL] 7. vi /etc/sysconfig/cman
CMAN_QUORUM_TIMEOUT=0

[ALL] 8. services turn ON and start them
chkconfig --level 345 cman      on
chkconfig --level 345 pacemaker on
service cman      start
service pacemaker start


[NODE] 9. Set Cluster Options
pcs property set stonith-enabled=false
pcs property set no-quorum-policy=ignore
pcs resource defaults migration-threshold=1

[NODE] 10. Check Clustering status
pcs status
crm_mon -1

[NODE] 11. Dummy Resource for demo purpose.
pcs resource create demo Dummy op monitor interval=30s

[NODE] 12. Floating IP88, which is managed by Linux Cluster
pcs resource create IP88 ocf:heartbeat:IPaddr2  \
      ip=192.168.1.88 cidr_netmask=24           \
      op monitor interval=30s

[NODE] 13. Use this to list available resource agents
pcs resource standards
pcs resource providers
pcs resource agents ocf:heartbeat

[ALL] 14. Install Apache HTTP, enable server-status, and open port 80

yum install httpd
iptables -I INPUT -m state --state NEW -p tcp -s 192.168.1.0/24 -d 192.168.1.0/24 --dport 80 -j ACCEPT
service iptables save ; service iptables restart

vi /etc/httpd/conf/httpd.conf
<Location /server-status>
    SetHandler server-status
    Order deny,allow
    Deny from all
    Allow from 127.0.0.1
    Allow from 192.168.1.0/24
</Location>

[NODE] 15. Create HTTPD resource using resource agent ocf:heartbeat:apache
pcs resource create HTTPD ocf:heartbeat:apache   \
      configfile=/etc/httpd/conf/httpd.conf      \
      statusurl="http://127.0.0.1/server-status" \
      op monitor interval=1min

[NODE] 16. IP88 and HTTPD must be colocation in the same node.
pcs constraint colocation add HTTPD with IP108 INFINITY

[NODE] 17. IP88 must be started first before HTTPD, starting order sequence
pcs constraint order IP88 then HTTPD

[NODE] 18. To show existing Linux Cluster
pcs status
pcs resource show IP88
pcs resource show HTTPD




SSH login slow
vi /etc/ssh/sshd_config
UseDNS no
service sshd restart


PassPhrase-less SSH
https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2

1. generate a pair of RSA keys without passphrase for a@A
ssh-keygen -t rsa -P ''

ssh-copy-id root@192.168.1.101

2. append a@A new public key to b@B:.ssh/authorized_keys
cat ~/.ssh/id_rsa.pub | ssh b@B 'cat >> ~/.ssh/authorized_keys'

cat ~/.ssh/id_rsa.pub | ssh root@192.168.1.102 'cat >> ~/.ssh/authorized_keys'

The .ssh directory and authorized_keys file had the right permission but were mislabeled to home_root_t
To check if your dirs and files labels do this:


$ ls -laZ
and then run this to fix

$ restorecon -r -vv /home/user/.ssh


